/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        make_scape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 11>;
        };

        toggle_bt_layer {
            bindings = <&tog 4>;
            key-positions = <0 24 5 29>;
        };

        toggle_adjust {
            bindings = <&tog 3>;
            key-positions = <36 41>;
        };

        lock_screen {
            bindings = <&kp LG(L)>;
            key-positions = <0 24 35 11>;
        };

        minor {
            bindings = <&kp RA(LS(Z))>;
            key-positions = <12 6 30>;
        };

        mayor {
            bindings = <&kp RA(LS(X))>;
            key-positions = <5 29 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D      &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp LEFT_BRACKET
&kp LSHFT   &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                          &kp LCTRL  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1     &kp N2      &kp N3                 &kp N4         &kp N5          &kp N6          &kp N7          &kp N8           &kp N9     &kp N0             &kp DEL
&kp TAB    &kp LA(Q)  &kp LS(N7)  &kp LA(LS(LESS_THAN))  &kp LA(LS(X))  &kp LS(N8)      &kp LS(N9)      &kp UP_ARROW    &kp MINUS        &kp EQUAL  &kp RIGHT_BRACKET  &kp LEFT_BRACKET
&kp LSHFT  &kp EXCL   &kp DOLLAR  &kp LS(GREATER_THAN)   &kp LS(N0)     &kp LS(FSLH)    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans     &kp SINGLE_QUOTE   &kp BACKSLASH
                                  &kp LGUI               &trans         &kp SPACE       &kp RET         &trans          &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp CAPSLOCK  &none     &none   &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT     &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        adjust_layer {
            bindings = <
&kp LA(LC(T))  &none      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none   &none     &none   &none   &kp C_BRI_DEC  &kp C_BRI_INC  &none    &none
&kp F1         &kp F2     &kp F3             &kp F4           &kp F5  &kp F6    &kp F7  &kp F8  &kp F9         &kp F10        &kp F11  &kp F12
&kp LSHFT      &kp LCTRL  &kp LEFT_ALT       &none            &none   &none     &none   &none   &none          &none          &none    &none
                                             &trans           &trans  &none     &none   &trans  &trans
            >;
        };

        bt_layer {
            bindings = <
&none  &none  &none  &none  &none  &none         &none       &none  &none  &none  &none  &bt BT_CLR_ALL
&none  &none  &none  &none  &none  &none         &none       &none  &none  &none  &none  &bt BT_CLR
&none  &none  &none  &none  &none  &none         &none       &none  &none  &none  &none  &none
                     &none  &none  &bt BT_PRV    &bt BT_NXT  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
